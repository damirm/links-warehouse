// Code generated by sqlc. DO NOT EDIT.
// source: links.sql

package querygen

import (
	"context"
	"encoding/json"
	"time"
)

const deleteQueuedUrl = `-- name: DeleteQueuedUrl :exec
delete from links_queue where url = $1
`

func (q *Queries) DeleteQueuedUrl(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, deleteQueuedUrl, url)
	return err
}

const dequeueUrl = `-- name: DequeueUrl :one
with candidate as (
    select added_at, url, picked_at from links_queue
    where picked_at is null
    order by added_at
    limit 1
    for update skip locked
)
update links_queue as q
set picked_at = now()
from candidate
where q.added_at = candidate.added_at and q.url = candidate.url
returning q.added_at, q.url, q.picked_at
`

func (q *Queries) DequeueUrl(ctx context.Context) (LinksQueue, error) {
	row := q.db.QueryRowContext(ctx, dequeueUrl)
	var i LinksQueue
	err := row.Scan(&i.AddedAt, &i.Url, &i.PickedAt)
	return i, err
}

const enqueueUrl = `-- name: EnqueueUrl :exec
insert into links_queue (url)
values ($1)
`

func (q *Queries) EnqueueUrl(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, enqueueUrl, url)
	return err
}

const insertLink = `-- name: InsertLink :exec
insert into links
       (url, title, tags, comments_count, views_count, rating, published_at, author, complexity, status)
values ($1,  $2,    $3,   $4,             $5,          $6,     $7,           $8,     $9,         $10)
`

type InsertLinkParams struct {
	Url           string
	Title         string
	Tags          json.RawMessage
	CommentsCount int32
	ViewsCount    int32
	Rating        int32
	PublishedAt   time.Time
	Author        json.RawMessage
	Complexity    int16
	Status        int16
}

func (q *Queries) InsertLink(ctx context.Context, arg InsertLinkParams) error {
	_, err := q.db.ExecContext(ctx, insertLink,
		arg.Url,
		arg.Title,
		arg.Tags,
		arg.CommentsCount,
		arg.ViewsCount,
		arg.Rating,
		arg.PublishedAt,
		arg.Author,
		arg.Complexity,
		arg.Status,
	)
	return err
}

const updateLink = `-- name: UpdateLink :exec
update links set status = $1
`

func (q *Queries) UpdateLink(ctx context.Context, status int16) error {
	_, err := q.db.ExecContext(ctx, updateLink, status)
	return err
}
